> Menu doesn't exist yet
| Create it?  Make your menu by creating one of these...
- text file/
  @~/menu/<name>.txt
    | Change this text to something useful.
    | It will be the content of your menu.
- items/
  | You can type out items literally.
  @~/menu/<name>.menu
    | - dogs/
    |   - hot/
    | - cats/
  - with wiki elements/
    @~/menu/<name>.menu
      | > Heading
      | A Sentence.
      | - an item/
      |   > Heading under the item
      |   @http://google.com/
  - .directions/
  - creating inline/
    | As a shortcut for creating or updating a menu, you can just
    | type some items in place.  For example, double-click on '<name>'
    | above to collapse, then add some items kind of like this:
    |
    | <name>/
    |   - dogs/
    |     - pugs/
    |   - cats/
    |
    | To save, simply double-click on one of the items and you'll be
    | prompted to save.  Or, with your cursor on the menu or one of
    | the items, type as+menu (meaning Control+A, Control+M).
- notes/
  @~/menu/<name>.notes
    | > A heading
    | Stuff under headings appears
    | after you expand.
    |
    | > Another heading
    | You can put anything under the headings.
- code/
  @~/menu/<name>.rb
    | # Change this code to something useful
    | a = "la"
    | a * 3
  - ruby class/
    @~/menu/<name>.rb
      | class <Name>
      |   def self.menu *args
      |     "
      |     hello
      |     "
      |   end
      | end
    - .directions/
  - other languages/
    - python/
      @~/menu/<name>.py
        | # Change this code to something useful
        | a = "hi"
        | a + a
    - js/
      @~/menu/<name>.js
        | // Change this code to something useful
        | a = "la"
        | return a + a
    - coffeescript/
      @~/menu/<name>.coffee
        | # Change this code to something useful
        | a = "la"
        | a + a
  - combinations/
    - ruby class with embedded menu/
      @~/menu/<name>.rb
        | class <Name>
        |   MENU = "
        |     - cats/
        |       - siamese/
        |     - .dogs/
        |     "
        |   def self.dogs
        |     "arf"
        |   end
        | end
    - ruby script and menu file/
      @~/menu/
        - <name>/
          - index.menu
            | - cats/
            | - dogs/
          - index.rb
            | args[0] * 2
    - ruby class and menu file/
      @~/menu/
        
  - plain ruby object/
    | Will use class or instance methods.
  - programatic/
    - block/
    - pattern/
    - load from disk/
    - menu with other stuff/
  - items with nested code/
    @~/menu/<name>.menu
      | - add/
      |   ! a = 1
      |   ! 2 + a
      | - use an arg/
      |   ! return "| Pass something in, like:\n- hi/" if ! args[0]
      |   ! args[0] * 3
    - other languages/
      @~/menu/<name>.menu
        | - using javascript/
        |   ! a = 1   // .js
        |   ! return 2 + a
        | - using coffeescript/
        |   ! a = 1   # .coffee
        |   ! 2 + a
        | - using python/
        |   ! a = 1   # .py
        |   ! return 2 + a
  - .directions/
- more/
  - bootstrap/
    @~/menu/<name>.bootstrap
      | > Heading
      | Here's a sentence.
      | > Another
      | The following three columns will be next to each other.
      |
      | > One
      | Lorem...
      | > Two
      | Ipsum...
      | > Three
      | Dolor...
  - wrap/
    - path/
      @~/menu/<name>.rb
        | Xiki["tables/foo/", args]
    - filename/
      @~/menu/<name>.rb
        | Xiki["/tmp/foo/", args]
    - bookmark/
      @~/menu/<name>.rb
        | Xiki["$tm//", args]
  - redirect/
    | Makes one menu redirect to another.  Useful for creating menus
    | that just serve as shortcuts.
    @~/menu/<name>.menu
      | <<< foo/
  - directory/
    | You can make menus backed by directories.  Files or dirs within
    | the dir become items!
    @~/menu/<name>/
      - a.txt
        | This is the 'a' item.
      - b.rb
        | 1 + 2   # The 'b' item will output "3"
      - c/
    + more/
      | You can have any number of nested dirs and files, nested as deep
      | as you want!
  - index files/
    - explain they work like index.html files, and do the work for their containing directory
    - so you can optionally have a dir a menu that contains all the files
    - show one example
    - show example of 2 equivalent versions
  - multiple files/
    - show 2 files with same name that work together
      - don't need to be nested in a directory
  - todo/
    > Add these menus
    - with menu_after
    - with menu_before
    - cooperating
      - with MENU and methods
      - with foo.menu and methods
